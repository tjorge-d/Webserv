USED FUNCTIONS

// Socket related //
socket -> creates a socket
setsockopt -> sets options for the socket
bind -> binds the socket
connect -> connects the socket
htons -> conversion of the port for bind/connect
htonl -> conversion of the address for bind/connect
listen -> puts a binded (client-side) socket in listening mode to accept client connections
accept -> accepts the connection request of a client into a listening socket

// File descriptor manipulation //
fcntl -> Performs actions in file descriptors
recv -> reads the data from a socket file descriptor
send -> writes data on a socket file descriptor
close -> closes a file descriptor (universal)
stat -> Obtains information about a file

// Signal related //
signal -> replaces the behaviour of a signal

// Event Related //
epoll_create -> creates an epoll file descriptor
epoll_ctl -> control interface for an epoll file descriptor
epoll_wait -> waits for an epoll event

// Error management //
strerror -> gives a string of the last error 

UNUSED FUNCTIONS

// I/O management functions //
poll -> more portable than epoll(), it's less performative and older
select -> Older than poll()
kqueue(kqueue, kevent) -> less portable than poll(), only works on macOS

// File descriptor manipulation functions //
read -> read the data of any file descriptor (universal)
write -> writes data on a file descriptor (universal)


execve
dup
dup2
pipe
gai_strerror
errno
dup
dup2
fork
socketpair
ntohs
ntohl
chdir
getaddrinfo
freeaddrinfo
getsockname -> gives the sockaddr_in of a socket
getprotobyname
waitpid
kill
access
open
opendir
readdir
closedir

WHAT IS A WEBSERVER?

- It is a piece of software that serves web content -> https://developer.mozilla.org/en-US/docs/Web/HTTP/Overview



WHAT HAPPENS IN A WEBSERVER? (in order)

- It LISTENS on a PORT for a REQUEST sent via a TRANSPORT LAYER PROTOCOL and returns a RESPONSE containing the requested RESOURCE -> https://i.sstatic.net/wOfS8.png
	- LISTENS: Is idle waiting for a request, doesn't do anything
	- PORT: Is a unique number used to identify where the information should be transmited
	- REQUEST: Is sent using HTTP(Hypertext Transfer Protocol) and is made by a client(for example, a web browser) to a server, in order to retrieve a web page or other resources. There are many types of of web requests (methods) -> https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods
		- GET: A request made on behalf of a client seeking data from a specified resource. The server will process the request, get the information/data and send it back to the client
		- HEAD: It's similar to a GET method but only requests the header of the data. Might be used to rapidly/efficiently check the availability of the content
		- POST: A request to submit an entity to a specified resource 
		- PUT: Like the POST method, it is used to create but can also replace. Usually you choose to implement only one, POST or PUT, depending on the server (?)
		- PATCH: A request that updates an entity in a specified resource
		- DELETE: It deletes a specified resource
		- CONNECT: Establishes a tunnel to the server identified by a target resource
		- OPTIONS: Describes the communication options for the target resource
		- TRACE: performs a message loop-back test along the path to the target resource
	- TRANSPORT LAYER PROTOCOL: Is a set of rules and procedures used to deliver data between aplication processes on different hosts in the same network
	- RESPONSE: respondes if a specific REQUEST has been successfully completed or not -> https://developer.mozilla.org/en-US/docs/Web/HTTP/Status ; https://www.tutorialspoint.com/http/http_responses.htm
		- Informational responses (100 – 199)
		- Successful responses (200 – 299)
		- Redirection messages (300 – 399)
		- Client error responses (400 – 499)
		- Server error responses (500 – 599)
	- RESOURCE: A source of web content



STATIC VS DYNAMIC WEBSITES -> https://rocketmedia.com/resources/static-vs-dynamic-website

- Static Website: Each page of the website has an HTML/CSS/JS/... file associated with it. You must change the file to change the website content
- Dynamic Website: The website will use server technologies (WordPress, PHP, Node.js, ...) to build a webpage when a user tries to visit it



WRITING A BASIC HTTP WEBSERVER -> https://www.youtube.com/watch?v=gk6NL1pZi1M

- Create a listening socket, it must be server-side(binded)
- Create a signal or any other way to close the listening socket in case of the server being idle while waiting for a connection 
- Create a loop that WAITS for connections, HANDLES them and then CLOSES them gracefully while the listening socket is still operating or in other specific conditions
	- WAITING -> to wait for a connection you must use accept(int SOCKET, struct sockaddr *ADDRESS, int *ADDRESS_LEN). This function will give a new socket fd to communicate with the client or returns a negative value in case of a error 
		- SOCKET -> The fd of the listening socket
		- ADDRESS -> The address struct built during the construction of a specified client. It can be left as NULL if the address is not relevant
		- ADDRESS_LEN -> sizeof(ADDRESS). Left as NULL if ADDRESS is NULL
	- HANDLING -> The content of the connection can be handled using various functions
		- READING -> Use recv(int SOCKET(the socket fd given by access), char *BUFFER, int LENGHT, int FLAGS) or read() without FLAGS argument
		- WRITING -> Use send(int SOCKET(the socket fd given by access), char *BUFFER, int LENGHT, int FLAGS) or write() without FLAGS argument
	- CLOSING -> Use close(int SOCKET(the socket fd given by access))
- Close the listening socket if it escaped the loop and its still opened



CREATING A SOCKET (Sys/socket.h) -> https://www.ibm.com/docs/en/zos/2.4.0?topic=functions-listen-prepare-server-incoming-client-requests

- To create a socket you must store it in a "socket file descriptor"(int) using socket(int DOMAIN,int TYPE, int PROTOCOL)
    - DOMAIN (protocol family used for communication) -> AF_INET (IPv4 Internet protocols)
    - TYPE (communication semantics) -> SOCK_STREAM (sequenced, reliable, two-way, connection-based byte streams)
    - PROTOCOL (protocol to be used) -> 0 (?)
- Bind(server-side) or Connect(client-side) the socket using bind/connect(int SOCKET, (struct sockaddr *) ADDRESS, int ADDRESS_LEN)
    - SOCKET (fd) -> The value given by socket()
    - ADDRESS -> A data structure from "netinet/in.h" that needs to be filled prior (since we are using IPv4(AF_INET family) we use the "sockaddr_in" format)
        - Address.sin_family -> Socket (fd)
        - Address.sin_port -> The port of the binding/connection using htons(int PORT) to convert it
        - Address.sin_addr -> The interface (address) of the binding using htonl(u_long INTERFACE)
    - ADDRESS_LEN -> sizeof(ADDRESS)
- If the socket is server side you must make it a passive socket and ready to accept client connections using listen(int SOCKET, int BACKLOG)
	- SOCKET (fd) -> The value given by socket()
	- BACKLOG -> The maximum ammount of pending connections in a queue



CREATING A POLL TO WAIT AND MANAGE I/O MULTIPLEXING -> https://medium.com/@avocadi/what-is-epoll-9bbc74272f7c

- If we just use the function accept(), while we are dealing with the request of one connection we cannot get any other connection (Blocking I/O). To accept multiple connections in a row and deal with them afterwards we must create a epoll using it's funtions (epoll_create, epoll_ctl, epoll_wait). To handle multiple things inside one we call multiplexing.
	- epoll_create -> Creates an epoll instance in the kernel
	- epoll_ctl -> Tells the instance to gather fd's you're looking from with the use of the appropriate flags
	- epoll_wait -> Waits for the instance to tell whenever a wanted fd has changed (can be a block of fd's)



RESPONSE HEADER
- Content-Type:
	- Text -> text/html, text/plain, text/css ...
	- Image -> image/jpeg, image/png, image/gif, image/svg+xml ...
	- Video -> video/mp4, video/webm, video/ogg ...
	- Audio -> audio/mpeg, audio/wav, audio/ogg ...
	- Application -> application/javascript, application/json, application/xml ...
	- Application -> application/pdf, application/zip, application/gzip ...


what is an http config file?

what is poll(), select(), kqueue() and epoll()?

What is RFC, telnet and NGINX?

what makes a web server non-blocking and how to handle client disconections/connections.

how to include I/O operations?

How to read/recv or write/send trough poll() and equivalents?

which Common macros are used in a web server and how to use them (FD_SET, FD_CLR, FD_ISSET, FD_ZERO)?

how to make a server not hanging or how do I leave my server hanging?

how do I make it compatible with web browsers?

What are headers and answer behaviours?

how to provide error pages and what are default ones?

when should I use fork()?

What is CGI in a web server context?

how do I upload files?

What are methods?

How to implement GET, POST and DELETE methods?

how to make a server stress-proof?

How to make a server listen to multiple ports (trough config file)?

How does NGINX implement server configurations?

what is a chunk request?



MR CAMERS (BONUS)

What are cookies and how to implement them?

How to implement session management?

how to handle multiple CGI?



TASKS DONE
- Your server must remain non-blocking at all times and properly handle client disconnections when necessary
- It must be non-blocking and use only 1 poll() (or equivalent) for all the I/O operations between the client and the server (listen included) poll() (or equivalent) must monitor both reading and writing simultaneously
- You must never do a read or a write operation without going through poll() (or equivalent)
- Checking the value of errno is strictly forbidden after performing a read or write operation
- We will consider that NGINX is HTTP 1.1 compliant and may be used to compare headers and answer behaviors
- Your server must be able to listen to multiple ports (see Configuration file)

TODO LIST
- Your program must take a configuration file as an argument, or use a default path -> gofas
- Your server must have default error pages if none are provided -> gofas
- Stress test your server to ensure it remains available at all times -> gofas
- Support cookies and session management (provide simple examples) -> gofas/aguinha

- You cannot execve another web server (?) -> camers
- Your HTTP response status codes must be accurate -> camers
- You can’t use fork for anything other than CGI (like PHP, or Python, and so forth) -> camers
- Clients must be able to upload files -> camers/aguinha
- You need at least the GET, POST, and DELETE methods -> camers
- Handle multiple CGI -> camers/aguinha

- A request to your server should never hang indefinitely -> aguinha
- You can use every macro and define like FD_SET, FD_CLR, FD_ISSET and, FD_ZERO (understanding what they do and how they work is very useful) -> aguinha

- Your server must be compatible with standard web browsers of your choice -> FIREFOX
- You must be able to serve a fully static website
